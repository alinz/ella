
type greetingServiceServer struct {
	service GreetingService
	routes  map[string]serviceMethodHandler
}

var _ http.Handler = (*greetingServiceServer)(nil)

func (s *greetingServiceServer) createEchoMethodHandler() serviceMethodHandler {
	return createServiceMethodHandler(func(ctx context.Context, args *struct {
	}) (ret *struct {
		Message *Message `json:"message"`
	}, err error) {
		ret.Message, err = s.service.Echo(ctx)
		return
	})
}

func (s *greetingServiceServer) createPingMethodHandler() serviceMethodHandler {
	return createServiceMethodHandler(func(ctx context.Context, args *struct {
		UserID string `json:"user_id"`
	}) (ret *struct {
	}, err error) {
		err = s.service.Ping(ctx, args.UserID)
		return
	})
}

func (s *greetingServiceServer) createStatusStreamMethodHandler() serviceMethodHandler {
	return createStreamServiceMethod(func(ctx context.Context, args *struct {
		UserID string `json:"user_id"`
	}) (<-chan *stremEvent, error) {
		stream1, err := s.service.StatusStream(ctx, args.UserID)
		if err != nil {
			return nil, err
		}

		out := mergeChannels(
			ctx,
			createEventStream(ctx, "stream", stream1),
		)

		return out, nil
	})
}

func (s *greetingServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	handler, ok := s.routes[r.URL.Path]
	if !ok {
		ResponseError(w, Errorf(http.StatusNotFound, "method %q not found", r.URL.Path))
		return
	}

	handler(r.Context(), w, r)
}

func CreateGreetingServiceServer(service GreetingService) http.Handler {
	server := greetingServiceServer{
		service: service,
	}

	server.routes = map[string]serviceMethodHandler{
		"/rpc/GreetingService/Echo":         server.createEchoMethodHandler(),
		"/rpc/GreetingService/Ping":         server.createPingMethodHandler(),
		"/rpc/GreetingService/StatusStream": server.createStatusStreamMethodHandler(),
	}

	return &server
}
