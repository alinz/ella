
const (
{{- range $service := . }}
{{- $serviceName := $service.Name | ToPascal }}
	PrefixPath{{ $serviceName }} = "/rpc/{{ $serviceName }}/"
{{- end }}
)

{{- range $service := . }}
{{- $serviceName := $service.Name | ToPascal }}
{{- $serviceNameImpl := $service.Name | ToCamel }}

type {{ $serviceNameImpl }}Server struct {
	service {{ $serviceName }}
	routes  map[string]serviceMethodHandler
}

var _ http.Handler = (*{{ $serviceNameImpl }}Server)(nil)

func (s *{{ $serviceNameImpl }}Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	handler, ok := s.routes[r.URL.Path]
	if !ok {
		ResponseError(w, Errorf(http.StatusNotFound, "method %q not found", r.URL.Path))
		return
	}

	ctx := injectCommonVars(r.Context(), w, r)

	handler(ctx, w, r)
}

func Create{{ $serviceName }}Server(service {{ $serviceName }}) http.Handler {
	server := {{ $serviceNameImpl }}Server{
		service: service,
	}

	server.routes = map[string]serviceMethodHandler{
		{{- range $method := $service.Methods }}
		{{- $methodName := $method.Name | ToPascal }}
		PrefixPath{{ $serviceName }} + "{{ $methodName }}": server.create{{ $methodName }}MethodHandler(),
		{{- end }}
	}

	return &server
}

{{- range $method := $service.Methods }}
{{- $methodName := $method.Name | ToPascal }}
{{- $isStream := $method.Returns | IsStream }}
{{- $httpMethod := $method | ServiceMethodHttpMethod }}

{{- if $isStream }}

func (s *{{ $serviceNameImpl }}Server) create{{ $methodName }}MethodHandler() serviceMethodHandler {
	return createStreamServiceMethod("{{ $httpMethod }}", func(ctx context.Context, args *struct {
		{{ $method.Args | ToStructArgs }}
	}) (out <-chan *stremEvent, err error) {
		{{ $method.Returns | ToStreamReturnsName }}, err := s.service.{{ $methodName }}(
			ctx, 
			{{$method.Args | ToExtractArgs }}
		)
		if err != nil {
			return nil, err
		}

		out = mergeChannels(
			ctx,
			{{- range $ret := $method.Returns }}
			createEventStream(ctx, "{{ $ret.Name }}", {{ $ret.Name }}Stream),
			{{- end }}
		)

		return out, nil
	})
}

{{- else }}

func (s *{{ $serviceNameImpl }}Server) create{{ $methodName }}MethodHandler() serviceMethodHandler {
	return createServiceMethodHandler("{{ $httpMethod }}", func(ctx context.Context, args *struct {
		{{ $method.Args | ToStructArgs }}
	}) (ret *struct {
		{{ $method.Returns | ToStructReturns }}
	}, err error) {
		{{ $method.Returns | ReturnsExtract }} = s.service.{{ $methodName }}(
			ctx, 
			{{ $method.Args | ToExtractArgs }}
		)
		return
	})
}

{{- end }}

{{- end }}

{{- range $method := $service.Methods }}
{{- $methodName := $method.Name | ToPascal }}
{{- $isStream := $method.Returns | IsStream }}

{{- if $isStream }}

{{- end }}

{{- end }}

{{- end }}