
//
// Enums
//
{{ range $enum := . }}
type {{ $enum.Name }} {{ $enum.Type | ToLower }}

const (
	{{- range $i, $const := $enum.Constants }}
	{{ $enum.Name }}_{{ $const.Key }} {{ $enum.Name }} = {{ $const.Value }}
	{{- end }}
)


func (e *{{ $enum.Name }}) UnmarshalText(text []byte) error {
	switch strings.ToLower(string(text)) {
	{{- range $const := $enum.Constants }}
	case "{{ $const.Key | ToLower }}":
		*e = {{ $enum.Name }}_{{ $const.Key }}
	{{- end }}
	default:
		return fmt.Errorf("invalid enum value: %s", string(text))
	}
	return nil
}

func (e {{ $enum.Name }}) MarshalText() ([]byte, error) {
	name := e.String()
	if name == "" {
		return nil, fmt.Errorf("invalid enum {{ $enum.Name }} value: %v", e)
	}
	return []byte(name), nil
}

func (e {{ $enum.Name }}) String() string {
	var name string
	switch e {
	{{- range $const := $enum.Constants }}	
	case {{ $enum.Name }}_{{ $const.Key }}:
		name = "{{ $const.Key | ToLower }}"
	{{- end }}
	default:
		name = ""
	}
	return name
}
{{- end }}
