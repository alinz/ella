
type greetingServiceClient struct {
	client *http.Client
	host   string
}

var _ GreetingService = (*greetingServiceClient)(nil)

func (s *greetingServiceClient) Echo(ctx context.Context) (_ *Message, err error) {
	url, err := urlPathJoin(s.host, "/rpc/GreetingService/Echo")
	if err != nil {
		return
	}

	in := emptyStruct{}

	out := struct {
		Message *Message `json:"message"`
	}{}

	err = callServiceMethod(ctx, s.client, url, &in, &out)
	if err != nil {
		return nil, err
	}

	return out.Message, nil
}

func (s *greetingServiceClient) Ping(ctx context.Context, userID string) error {
	url := path.Join(s.host, "/rpc/GreetingService/Ping")

	in := struct {
		UserID string `json:"user_id"`
	}{
		UserID: userID,
	}

	out := emptyStruct{}

	err := callServiceMethod(ctx, s.client, url, &in, &out)
	if err != nil {
		return err
	}

	return nil
}

func (s *greetingServiceClient) StatusStream(ctx context.Context, userID string) (<-chan *Message, error) {
	url := path.Join(s.host, "/rpc/GreetingService/StatusStream")

	in := struct {
		UserID string `json:"user_id"`
	}{
		UserID: userID,
	}

	out1 := make(chan *Message)

	streamMapper := streamMapper{
		"stream": parseStreamData(out1),
	}

	err := callServiceStreamMethod(ctx, s.client, url, &in, streamMapper)
	if err != nil {
		return nil, err
	}

	return out1, nil
}

func CreateGreetingServiceClient(host string, client *http.Client) GreetingService {
	return &greetingServiceClient{
		host:   host,
		client: client,
	}
}
