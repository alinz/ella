{{- range $service := . }}
{{- $serviceName := $service.Name | ToPascal }}
{{- $serviceNameImpl := $service.Name | ToCamel }}

type {{ $serviceNameImpl }}Client struct {
	client *http.Client
	host   string
}

var _ {{ $serviceName }} = (*{{ $serviceNameImpl }}Client)(nil)

func Create{{ $serviceName }}Client(host string, client *http.Client) {{ $serviceName }} {
	return &{{ $serviceNameImpl }}Client{
		host:   host,
		client: client,
	}
}

{{- range $method := $service.Methods }}
{{- $methodName := $method.Name | ToPascal }}
{{- $isStream := $method.Returns | IsStream }}
{{- $httpMethod := $method | ServiceMethodHttpMethod }}

{{- if $isStream }}

func (s *{{ $serviceNameImpl }}Client) {{ $methodName }}({{ $method.Args | MethodArgs }}) ({{ $method.Returns | MethodReturnsIgnoreName }}) {
	url := path.Join(s.host, "/rpc/{{ $serviceName }}/{{ $methodName }}")

	IN := {{ $method.Args | MethodArgsStructClient }}

	{{- range $i, $ret := $method.Returns }}	
	Out{{ $i }} := make(chan {{ $ret.Type }})
	{{- end }}

	streamMapper := streamMapper{
	{{- range $i, $ret := $method.Returns }}
		"{{ $ret.Name }}": parseStreamData(Out{{ $i }}),
	{{- end }}
	}

	err = callServiceStreamMethod(ctx, "{{ $httpMethod }}", s.client, url, &IN, streamMapper)
	if err != nil {
		return
	}

	return  {{range $i, $ret := $method.Returns}}Out{{ $i }},{{- end}} nil
}

{{- else }}

func (s *{{ $serviceNameImpl }}Client) {{ $methodName }}({{ $method.Args | MethodArgs }}) ({{ $method.Returns | MethodReturnsIgnoreName }}) {
	url, err := urlPathJoin(s.host, "/rpc/{{ $serviceName }}/{{ $methodName }}")
	if err != nil {
		return
	}

	in := {{ $method.Args | MethodArgsStructClient }}

	out := {{ $method.Returns | MethodReturnsStructClient }}

	err = callServiceMethod(ctx, "{{ $httpMethod }}", s.client, url, &in, &out)
	if err != nil {
		return
	}

	return {{ $method.Returns | ReturnsOut }}
}

{{- end }}

{{- end }}

{{- end }}