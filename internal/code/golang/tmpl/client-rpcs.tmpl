//
// Client RPCs
//

{{- range $service := . }}

type rpc{{ $service.Name }}ServiceClient struct {
    adaptor rpcAdaptor
}

var _ Rpc{{ $service.Name }}Service = (*rpc{{ $service.Name }}ServiceClient)(nil)

func CreateRpc{{ $service.Name }}ServiceClient(adaptor rpcAdaptor) Rpc{{ $service.Name }}Service {
    return &rpc{{ $service.Name }}ServiceClient{
        adaptor: adaptor,
    }
}

{{- range $method := $service.Methods }}

func (s *rpc{{ $service.Name }}ServiceClient) {{ $method.Name }}(ctx context.Context, {{ $method.ArgsWithTypes }}) ({{ $method.ReturnsWithTypes }}, err error) { 
    out, err := rpcSend(ctx, s.adaptor, {{ $method.TopicName }}, &struct {
        {{ $method.ArgsDefinitions }}
    }{
        {{ $method.ArgsAssign }}
    }, &struct {
        {{ $method.ReturnsDefinitions }}
    }{})
    if err != nil {
        return
    }

    return {{ $method.Returns }}, nil
}

{{- end }}

{{- end }}