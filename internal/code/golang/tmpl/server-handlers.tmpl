//
// Server Handlers
//

const (
{{- range $service := . }}
	{{ $service.PathName }} = "{{ $service.Path }}"
{{- range $method := $service.Methods }}
	{{ $method.PathName }} = "{{ $method.Path }}"
{{- end }}
{{- end }}
)

{{- range $service := . }}

type {{ $service.NameImpl }} struct {
	service {{ $service.Name }}
	routes  map[string]httpServiceMethodHandler
}

var _ http.Handler = (*{{ $service.NameImpl }})(nil)

func (s *{{ $service.NameImpl }}) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	handler, ok := s.routes[r.URL.Path]
	if !ok {
		ResponseError(w, Errorf(http.StatusNotFound, "method %q not found", r.URL.Path))
		return
	}

	ctx := injectCommonVars(r.Context(), w, r)

	handler(ctx, w, r)
}

func Create{{ $service.Name }}Server(service {{ $service.Name }}) http.Handler {
	server := {{ $service.NameImpl }}{
		service: service,
	}

	server.routes = map[string]httpServiceMethodHandler{
		{{- range $method := $service.Methods }}
		{{ $method.PathName }}: server.create{{ $method.Name }}(),
		{{- end }}
	}

	return &server
}

{{- range $method := $service.Methods }}

func (s *{{ $service.NameImpl }}) create{{ $method.Name }}() httpServiceMethodHandler {
	return createServiceMethodHandler({{ $method.Http }}, {{ $method.HasArgs }}, func(ctx context.Context, args *struct {
		{{ $method.ArgsWithTypes }}
	}) (ret *struct {
		{{ $method.ReturnsWithTypes }}
	}, err error) {
		ret = &struct {
			{{ $method.ReturnsWithTypes }}
		}{}
		{{ $method.Returns }}, err = s.service.{{ $method.Name }}(
			ctx, 
			{{ $method.Args }}
		)
		return
	})
}

{{- end }}
{{- end }}
