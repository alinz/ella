{{- if .HasRpcServices }}
//
// RPC Clients
//

{{- range $service := .RpcServices }}

type rpc{{ $service.Name }}Client struct {
    adaptor rpcAdaptor
}

var _ Rpc{{ $service.Name }} = (*rpc{{ $service.Name }}Client)(nil)

func CreateRpc{{ $service.Name }}Client(adaptor rpcAdaptor) Rpc{{ $service.Name }} {
    return &rpc{{ $service.Name }}Client{
        adaptor: adaptor,
    }
}

{{- range $method := $service.Methods }}

func (s *rpc{{ $service.Name }}Client) {{ $method.Name }}(ctx context.Context {{ $method.Args.Definitions }}) ({{ $method.Returns.Definitions }}) { 
    out, err := rpcSend(ctx, s.adaptor, {{ $method.TopicName }}, &struct {
        {{ $method.ArgsStructDefinitions true }}
    }{
        {{ $method.ArgsNamesValues }}
    }, &struct {
        {{ $method.ReturnsStructDefinitions }}
    }{})
    if err != nil {
        return
    }

    {{ if not $method.HasReturns }} 
    _ = out
    {{ end }}

    return {{ $method.ReturnsNames "out."}} nil
}

{{- end }}

{{- end }}
{{ end }}