//
// Enums
//
{{range $enum := .Enums }}
type {{ $enum.Name }} {{ $enum.Type }}

const (
	{{- range $i, $key := $enum.Keys }}
	{{- if ne $key.Name "_" }}
	{{ $enum.Name }}_{{ $key.Name }} {{ $enum.Name }} = {{ $key.Value }}
	{{- end }}
	{{- end }}
)

func (e *{{ $enum.Name }}) UnmarshalText(text []byte) error {
	switch strings.ToLower(string(text)) {
	{{- range $key := $enum.Keys }}
	{{- if ne $key.Name "_" }}
	case "{{ $key.Name | ToSnakeCase }}":
		*e = {{ $enum.Name }}_{{ $key.Name }}
	{{- end }}	
	{{- end }}
	default:
		return fmt.Errorf("invalid enum value: %s", string(text))
	}
	return nil
}

func (e {{ $enum.Name }}) MarshalText() ([]byte, error) {
	name := e.String()
	if name == "" {
		return nil, fmt.Errorf("invalid enum {{ $enum.Name }} value: %v", e)
	}
	return []byte(name), nil
}

func (e {{ $enum.Name }}) String() string {
	var name string
	switch e {
	{{- range $key := $enum.Keys }}
	{{- if ne $key.Name "_" }}
	case {{ $enum.Name }}_{{ $key.Name }}:
		name = "{{ $key.Name | ToSnakeCase }}"
	{{- end }}
	{{- end }}
	default:
		name = ""
	}
	return name
}
{{ end }}
