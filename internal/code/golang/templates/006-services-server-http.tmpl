//
// Handler Servers
//

const (
{{- range $service := .HttpServices }}
	{{ $service.PathName }} = "{{ $service.PathValue }}"
{{- range $method := $service.Methods }}
	{{ $method.PathName }} = "{{ $method.PathValue }}"
{{- end }}
{{- end }}
)

{{- range $service := .HttpServices }}

type {{ $service.NameImpl }} struct {
	service Http{{ $service.Name }}Service
	routes  map[string]httpServiceMethodHandler
}

var _ http.Handler = (*{{ $service.NameImpl }})(nil)

func (s *{{ $service.NameImpl }}) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	handler, ok := s.routes[r.URL.Path]
	if !ok {
		httpResponseError(w, Errorf(http.StatusNotFound, nil, "method %q not found", r.URL.Path))
		return
	}

	ctx := injectCommonVars(r.Context(), w, r)

	handler(ctx, w, r)
}

func Create{{ $service.Name }}ServiceServer(service Http{{ $service.Name }}Service) http.Handler {
	server := {{ $service.NameImpl }}{
		service: service,
	}

	server.routes = map[string]httpServiceMethodHandler{
		{{- range $method := $service.Methods }}
		{{ $method.PathName }}: server.create{{ $method.Name }}(),
		{{- end }}
	}

	return &server
}

{{- range $method := $service.Methods }}

func (s *{{ $service.NameImpl }}) create{{ $method.Name }}() httpServiceMethodHandler {
{{- if and $method.IsStream $method.IsBinary }}
	return createStreamBinaryServiceMethod(
		{{ $method.Options.HttpMethod }},
		"{{ $method.Options.ContentType }}",
		{{ $method.HasArgs }},
		func (ctx context.Context, args *struct { 
			{{ $method.ArgsStructDefinitions false }}
		}) (io.Reader, error) {
			return s.service.{{ $method.Name }}(ctx, {{ $method.ArgsNames "args." }})
		},
	)
{{- else if $method.IsStream }}
	return createStreamServiceMethod(
		{{ $method.Options.HttpMethod }},
		{{ $method.HasArgs }},
		func (ctx context.Context, args *struct { 
			{{ $method.ArgsStructDefinitions false }}
		}) (<-chan *stremEvent, error) {
			{{ $method.GetReturnStreamName }}, err := s.service.{{ $method.Name }}(ctx, {{ $method.ArgsNames "args." }})
			if err != nil {
				return nil, err
			}

			out := make(chan *stremEvent, 1)
			go func() {
				defer close(out)
				var id int64
				for event := range {{ $method.GetReturnStreamName }} {
					data, err := json.Marshal(event)
					if err != nil {
						out <- &stremEvent{
							id: id,
							event: "error",
							data: err.Error(),
						}
						return
					}

					out <- &stremEvent{
						id: id,
						event: "{{ $method.GetReturnStreamName }}",
						data: string(data),
					}
				}
			}()
			return out, nil
		},
	)
{{- else if $method.IsFileUpload }}
	return createServiceMethodUploadHandler(
		{{ $method.Options.MaxUploadSize }},
		func(ctx context.Context, files <-chan *fileUpload, args *struct{
			{{ $method.ArgsStructDefinitions false }}
		})(ret *struct {
		{{ $method.ReturnsStructDefinitions }}
		}, err error){
			ret = &struct {
				{{ $method.ReturnsStructDefinitions }}
			}{}
			{{ $method.ReturnsNames "ret." }} err = s.service.{{ $method.Name }}(
				ctx,
				files,
				{{ $method.ArgsNames "args." }}
			)
			return
		},
	)
{{- else }}
	return createServiceMethodHandler({{ $method.Options.HttpMethod }}, {{ $method.HasArgs }}, func(ctx context.Context, args *struct {
		{{ $method.ArgsStructDefinitions true }}
	}) (ret *struct {
		{{ $method.ReturnsStructDefinitions }}
	}, err error) {
		ret = &struct {
			{{ $method.ReturnsStructDefinitions }}
		}{}
		{{ $method.ReturnsNames "ret." }} err = s.service.{{ $method.Name }}(
			ctx, 
			{{ $method.ArgsNames "args." }}
		)
		return
	})
{{- end }}
}

{{- end }}
{{- end }}
